#!/usr/bin/env python3

import rospy
import numpy as np
import math
import matplotlib.pyplot as plt
from queue import PriorityQueue

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Node:
    def __init__(self, x, y, node_id):
        self.point = Point(x, y)
        self.node_id = node_id
        self.neighbors = []

class PRM:
    def __init__(self, x_max, x_min, y_max, y_min, numNodes):
        self.x_max = x_max
        self.x_min = x_min
        self.y_max = y_max
        self.y_min = y_min
        self.numNodes = numNodes
        self.nodes = []
        self.nodes.append(Node(0, 0, 0))  # Start node
        self.nodes.append(Node(18, 18, 1))  # Goal node

    def generateRandomPoints(self):
        total = 0
        while total < self.numNodes:
            p = Node(np.random.uniform(self.x_min, self.x_max),
                     np.random.uniform(self.y_min, self.y_max),
                     total + 2)
            self.nodes.append(p)
            total += 1

    def computeNeighborGraph(self):
        for i in self.nodes:
            distanceMap = []
            for j in self.nodes:
                if i.node_id != j.node_id:
                    distance = self.getEuclideanDistance(i.point, j.point)
                    distanceMap.append((distance, j))
            distanceMap.sort(key=lambda x: x[0])
            i.neighbors = [pair[1] for pair in distanceMap[:10]]

    def getEuclideanDistance(self, p1, p2):
        return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2)

    def solveShortestPath(self):
        dist = {node.node_id: float('inf') for node in self.nodes}
        dist[0] = 0
        prev = {node.node_id: None for node in self.nodes}
        pq = PriorityQueue()
        pq.put((0, self.nodes[0]))

        while not pq.empty():
            current_distance, current_node = pq.get()
            if current_node.node_id == 1:  # Goal node
                break
            for neighbor in current_node.neighbors:
                alt = current_distance + self.getEuclideanDistance(current_node.point, neighbor.point)
                if alt < dist[neighbor.node_id]:
                    dist[neighbor.node_id] = alt
                    prev[neighbor.node_id] = current_node
                    pq.put((alt, neighbor))

        # Backtrack to find the path
        path = []
        node = self.nodes[1]  # Start from the goal node
        while node is not None:
            path.append(node.node_id)
            node = prev[node.node_id]
        path.reverse()
        return path

    def plot_prm(self, path):
        plt.figure(figsize=(8, 8))
        for node in self.nodes:
            for neighbor in node.neighbors:
                plt.plot([node.point.x, neighbor.point.x], [node.point.y, neighbor.point.y], 'r-', alpha=0.5)
            plt.plot(node.point.x, node.point.y, 'bo')
        
        # Plot the shortest path
        for i in range(len(path) - 1):
            start_node = self.nodes[path[i]]
            end_node = self.nodes[path[i + 1]]
            plt.plot([start_node.point.x, end_node.point.x], [start_node.point.y, end_node.point.y], 'y-', linewidth=2)

        plt.plot(self.nodes[0].point.x, self.nodes[0].point.y, 'go', markersize=10, label="Start")
        plt.plot(self.nodes[1].point.x, self.nodes[1].point.y, 'ro', markersize=10, label="Goal")
        plt.xlabel("X")
        plt.ylabel("Y")
        plt.legend()
        plt.title("Probabilistic Road Map (PRM) with Shortest Path")
        plt.show()

if __name__ == "__main__":
    rospy.init_node('prm_node', anonymous=True)

    # Load parameters from params.yaml
    x_max = rospy.get_param('~x_max', 20)
    x_min = rospy.get_param('~x_min', 0)
    y_max = rospy.get_param('~y_max', 20)
    y_min = rospy.get_param('~y_min', 0)
    numNodes = rospy.get_param('~numNodes', 50)

    prm = PRM(x_max, x_min, y_max, y_min, numNodes)
    prm.generateRandomPoints()
    prm.computeNeighborGraph()

    path = prm.solveShortestPath()
    rospy.loginfo("Shortest path found: %s", path)

    prm.plot_prm(path)
